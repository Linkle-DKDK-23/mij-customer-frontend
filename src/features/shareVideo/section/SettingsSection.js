import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Switch } from "@/components/ui/switch";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { DatePickerWithPopover } from "@/components/common/DatePickerWithPopover";
import PlanSelector from '@/features/shareVideo/componets/PlanSelector';
export default function SettingsSection({ scheduled, expiration, plan, single, scheduledDate, scheduledTime, expirationDate, selectedPlanId, selectedPlanName, singlePrice, showPlanSelector, onToggleSwitch, onScheduledDateChange, onScheduledTimeChange, onExpirationDateChange, onPlanSelect, onPlanRemove, onPlanClear, onSinglePriceChange, onPlanSelectorOpen, onPlanSelectorClose, }) {
    return (_jsxs(_Fragment, { children: [_jsxs("div", { className: "space-y-4 p-5", children: [_jsx(ToggleRow, { label: "\u4E88\u7D04\u6295\u7A3F", id: "scheduled", checked: scheduled, onChangeToggle: (v) => onToggleSwitch('scheduled', v) }), scheduled && (_jsxs("div", { className: "flex items-center space-x-2 w-full", children: [_jsx(DatePickerWithPopover, { value: scheduledDate, onChange: onScheduledDateChange }), _jsxs("div", { className: "flex items-center space-x-2 basis-2/5 flex-shrink-0", children: [_jsxs(Select, { onValueChange: (value) => onScheduledTimeChange(value, true), children: [_jsx(SelectTrigger, { className: "w-[80px]", children: _jsx(SelectValue, { placeholder: "\u6642" }) }), _jsx(SelectContent, { children: Array.from({ length: 24 }, (_, i) => (_jsx(SelectItem, { value: i.toString(), children: i.toString().padStart(2, "0") }, i))) })] }), _jsx("span", { className: "text-sm font-medium font-bold", children: "\u6642" }), _jsxs(Select, { onValueChange: (value) => onScheduledTimeChange(value, false), children: [_jsx(SelectTrigger, { className: "w-[80px]", children: _jsx(SelectValue, { placeholder: "\u5206" }) }), _jsx(SelectContent, { children: Array.from({ length: 60 }, (_, i) => (_jsx(SelectItem, { value: i.toString(), children: i.toString().padStart(2, "0") }, i))) })] }), _jsx("span", { className: "text-sm font-medium font-bold", children: "\u5206" })] })] })), _jsx(ToggleRow, { label: "\u516C\u958B\u671F\u9650", id: "expiration", checked: expiration, onChangeToggle: (v) => onToggleSwitch('expiration', v) }), expiration && (_jsx("div", { className: "flex items-center space-x-2 w-full", children: _jsx(DatePickerWithPopover, { value: expirationDate, onChange: onExpirationDateChange }) })), _jsx(ToggleRow, { label: "\u30D7\u30E9\u30F3\u306B\u8FFD\u52A0", id: "plan", checked: plan, onChangeToggle: (v) => onToggleSwitch('plan', v) }), plan && (_jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-sm font-medium", children: selectedPlanId.length > 0 ? `${selectedPlanId.length}つのプランを選択済み` : 'プランを選択してください' }), _jsxs("div", { className: "flex space-x-2", children: [_jsx(Button, { variant: "outline", size: "sm", onClick: onPlanSelectorOpen, children: selectedPlanId.length > 0 ? '追加・変更' : '選択' }), selectedPlanId.length > 0 && (_jsx(Button, { variant: "outline", size: "sm", onClick: onPlanClear, children: "\u5168\u89E3\u9664" }))] })] }), selectedPlanId.length > 0 && (_jsx("div", { className: "space-y-1", children: selectedPlanId.map((planId, index) => (_jsxs("div", { className: "flex items-center justify-between text-xs text-gray-600 bg-gray-50 p-2 rounded", children: [_jsxs("span", { children: ["\u9078\u629E\u4E2D: ", selectedPlanName[index] || `プランID: ${planId}`] }), _jsx(Button, { variant: "ghost", size: "sm", onClick: () => onPlanRemove(index), className: "h-6 px-2 text-xs text-red-500 hover:text-red-700", children: "\u524A\u9664" })] }, planId))) }))] })), _jsx(ToggleRow, { label: "\u5358\u54C1\u8CA9\u58F2", id: "single", checked: single, onChangeToggle: (v) => onToggleSwitch('single', v) }), single && (_jsx("div", { className: "space-y-2", children: _jsxs("div", { className: "relative", children: [_jsx("span", { className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500", children: "\u00A5" }), _jsx(Input, { id: "single-price", type: "number", className: "pl-8", placeholder: "0", value: singlePrice || '', onChange: (e) => onSinglePriceChange(e.target.value) })] }) }))] }), showPlanSelector && (_jsx(PlanSelector, { selectedPlanId: selectedPlanId, onPlanSelect: onPlanSelect, onClose: onPlanSelectorClose }))] }));
}
// 補助コンポーネント：ToggleRow
function ToggleRow({ label, id, checked, onChangeToggle }) {
    return (_jsxs("div", { className: "flex items-center justify-between", children: [_jsx(Label, { htmlFor: id, className: "text-sm font-medium font-bold", children: label }), _jsx(Switch, { id: id, checked: checked, onCheckedChange: onChangeToggle })] }));
}
